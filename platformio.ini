; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[env]
test_framework = unity
platform_packages =
	toolchain-riscv32-esp

[platformio]
default_envs = native-test
; default_envs = native-test
; default_envs = native-test


; __________________ SHARED __________________

[any_shared]
lib_extra_dirs =
	${PROJECT_DIR}/lib/submodules
	${PROJECT_DIR}/lib/platforms/any
	${PROJECT_DIR}/lib/presence-cube.domain.abstractions
	${PROJECT_DIR}/lib/presence-cube.usecases.abstractions
	${PROJECT_DIR}/lib/presence-cube.usecases
	${PROJECT_DIR}/lib/presence-cube.mapping
	${PROJECT_DIR}/lib/presence-cube.errorhandling
	${PROJECT_DIR}/lib/presence-cube.shared
lib_deps =
	throwtheswitch_cexception
build_flags =
    -Werror
	-D CEXCEPTION_USE_CONFIG_FILE

; _________________ TESTING-SHARED ______________

[testing_shared] ; inherits from any_shared
lib_extra_dirs = ${any_shared.lib_extra_dirs}
lib_deps = 
	${any_shared.lib_deps}
	presence-cube.testing.shared
build_flags =
	${any_shared.build_flags}
	-D PLATFORM_TEST
	-D UNITY_INCLUDE_PRINT_FORMATTED
	-D BUILD_ENVIRONMENT='"test"'

; 86016

; __________________ ESP32 __________________

[espressif32_shared] ; inherits from: any_shared
; board = az-delivery-devkit-v4
board = esp32-s2-kaluga-1
platform = espressif32@4.4.0
framework = espidf
build_flags =
    ${any_shared.build_flags}
	-D PLATFORM_ESPRESSIF32
upload_protocol = esptool
;upload_protocol = esp-prog
board_build.f_flash = 80000000L
board_build.flash_mode = dio
board_build.partitions = partitions.csv
upload_speed = 460800
monitor_speed = 115200
lib_ldf_mode = off
lib_extra_dirs =
	${any_shared.lib_extra_dirs}
	${PROJECT_DIR}/lib/platforms/espressif32
	${PROJECT_DIR}/lib/presence-cube.infrastructure.esp
	${PROJECT_DIR}/components
lib_compat_mode = strict
lib_deps =
	${any_shared.lib_deps}
	presence-cube.esp

[env:espressif32-dev] ; inherits from espressif32_shared
board = ${espressif32_shared.board}
platform = ${espressif32_shared.platform}
framework = ${espressif32_shared.framework}
build_flags = ${espressif32_shared.build_flags}
upload_protocol = ${espressif32_shared.upload_protocol}
upload_speed = ${espressif32_shared.upload_speed}
monitor_speed = ${espressif32_shared.monitor_speed}
lib_ldf_mode = ${espressif32_shared.lib_ldf_mode}
lib_extra_dirs = ${espressif32_shared.lib_extra_dirs}
lib_compat_mode = ${espressif32_shared.lib_compat_mode}
lib_deps = ${espressif32_shared.lib_deps}
board_build.f_flash = ${espressif32_shared.board_build.f_flash}
board_build.flash_mode = ${espressif32_shared.board_build.flash_mode}
board_build.partitions = ${espressif32_shared.board_build.partitions}

[env:espressif32-test] ; inherits from espressif32_shared, testing_shared
platform = ${espressif32_shared.platform}
board = ${espressif32_shared.board}
framework = ${espressif32_shared.framework}
upload_protocol = ${espressif32_shared.upload_protocol}
upload_speed = ${espressif32_shared.upload_speed}
monitor_speed = ${espressif32_shared.monitor_speed}
lib_ldf_mode = ${espressif32_shared.lib_ldf_mode}
lib_extra_dirs = ${espressif32_shared.lib_extra_dirs}
lib_compat_mode = ${espressif32_shared.lib_compat_mode}
board_build.f_flash = ${espressif32_shared.board_build.f_flash}
board_build.flash_mode = ${espressif32_shared.board_build.flash_mode}
board_build.partitions = ${espressif32_shared.board_build.partitions}
test_filter =
	embedded/*
	any/*
build_flags =
	${espressif32_shared.build_flags}
	${testing_shared.build_flags}
lib_deps =
	${espressif32_shared.lib_deps}
	${testing_shared.lib_deps}

; __________________ NATIVE __________________

[native_shared] ; inherits from: any_shared
platform = native
lib_deps = 
	${any_shared.lib_deps}
	presence-cube.native
build_flags =
	${any_shared.build_flags}
	-D PLATFORM_NATIVE
lib_ldf_mode = off
lib_compat_mode = strict
lib_extra_dirs = 
	${any_shared.lib_extra_dirs}
	${PROJECT_DIR}/lib/presence-cube.infrastructure.native

[env:native-dev] ; inherits from native_shared
platform = ${native_shared.platform}
lib_deps = 
	${native_shared.lib_deps}
build_flags =
	${native_shared.build_flags}
	-D BUILD_ENVIRONMENT='"development"'
lib_ldf_mode = ${native_shared.lib_ldf_mode}
lib_compat_mode = ${native_shared.lib_compat_mode}
lib_extra_dirs = ${native_shared.lib_extra_dirs}

[env:native-test] ; inherits from native_shared, testing_shared
platform = ${native_shared.platform}
lib_ldf_mode = ${native_shared.lib_ldf_mode}
lib_compat_mode = ${native_shared.lib_compat_mode}
lib_extra_dirs = ${native_shared.lib_extra_dirs}
test_filter =
	native/*
	any/*
lib_deps =
	${native_shared.lib_deps}
	${testing_shared.lib_deps}
build_flags =
	${native_shared.build_flags}
	${testing_shared.build_flags}

; lib_ldf_mode
;    https://docs.platformio.org/en/latest/librarymanager/ldf.html#dependency-finder-mode
;    off: “Manual mode”, does not process source files of a project and dependencies. Builds only the libraries that are specified in manifests (library.json, module.json) or using lib_deps option.
;    chain: [DEFAULT] Parses ALL C/C++ source files of the project and follows only by nested includes (#include ..., chain...) from the libraries. It also parses C, CC, CPP files from libraries which have the same name as included header file. Does not evaluate C/C++ Preprocessor conditional syntax.
;    deep: Parses ALL C/C++ source files of the project and parses ALL C/C++ source files of the each found dependency (recursively). Does not evaluate C/C++ Preprocessor conditional syntax.
;    chain+: The same behavior as for the chain but evaluates C/C++ Preprocessor conditional syntax.
;    deep+: The same behavior as for the deep but evaluates C/C++ Preprocessor conditional syntax.


; lib_compat_mode
;    https://docs.platformio.org/en/latest/librarymanager/ldf.html#ldf-compat-mode
;    off: Does not check for compatibility (is not recommended)
;    soft: [DEFAULT] Checks for the compatibility with framework from build environment
;    strict: Checks for the compatibility with framework and platform from build environment.

; default_envs
;    https://docs.platformio.org/en/latest/projectconf/section_platformio.html#projectconf-pio-default-envs
;    The pio run command processes all environments [env:***] by default if the pio run --environment option is not specified.
;    `default_envs` allows one to define the environments that should be processed by default.
;    after switching, you might need to rebuild the intellisense index!

; debug_test
;   https://docs.platformio.org/en/latest/plus/debugging.html#debug-unit-tests
;   debug tests enables debuggability to a selected set of tests. Users can then debug test files
;   directly using the VSCode debugger ("Run and Debug - Ctrl-Shift-D").
